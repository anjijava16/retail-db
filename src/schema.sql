-- BRANCH
-- Stores information about two types of company subunits i.e. storehouses
-- and non-storehouses (perhaps offices and headquaters).

CREATE TABLE BRANCH (
	BRANCH_ID  SERIAL PRIMARY KEY,
	ADDRESS    VARCHAR(512) NOT NULL,
	CITY       VARCHAR(64) NOT NULL,
	STOREHOUSE BOOLEAN NOT NULL DEFAULT FALSE
);

-- BRANCH_PHONE
-- In many-to-many relation with BRANCH table. A large company may own
-- a nationwide helpdesk (0-800) that can be used to contact any company
-- subunit - such phone numbers have BRANCH_ID set to null.

CREATE TABLE BRANCH_PHONE (
	BRANCH_ID INTEGER REFERENCES BRANCH ON DELETE CASCADE,
	PHONE     VARCHAR(32) PRIMARY KEY,
	FAX       BOOLEAN NOT NULL DEFAULT FALSE
);

-- EMPLOYEE
-- Information about employees working in all branches of the company.
-- Deleting branches or superior employees does not cascade. We need to
-- fire, relocate employee, or change its superior first.

CREATE TABLE EMPLOYEE (
	EMPLOYEE_ID  SERIAL PRIMARY KEY,
	SUPERIOR_ID  INTEGER REFERENCES EMPLOYEE(EMPLOYEE_ID) ON DELETE RESTRICT,
	BRANCH_ID    INTEGER NOT NULL REFERENCES BRANCH ON DELETE RESTRICT,
	FIRST_NAME   VARCHAR(128) NOT NULL,
	LAST_NAME    VARCHAR(128) NOT NULL,
	EXTRA_WAGE   NUMERIC(4,2) NOT NULL DEFAULT 0
);

-- POSITION
-- Many-to-many relationship with EMPLOYEE relation. Defines basic wage for
-- all employees working on this position. Field SALESMAN specifies whether
-- employees on this position may be assigned to process orders.

CREATE TABLE POSITION (
	POSITION_ID SERIAL PRIMARY KEY,
	NAME        VARCHAR(64) NOT NULL,
	BASE_WAGE   NUMERIC(4,2) NOT NULL,
	SALESMAN    BOOLEAN NOT NULL DEFAULT FALSE,

	-- Minimum wage check
	CHECK(BASE_WAGE > 6.06)
);

-- EMPLOYEE_POSITION
-- Proxy between EMPLOYEE and POSITION relations.

CREATE TABLE EMPLOYEE_POSITION (
	EMPLOYEE_ID INTEGER NOT NULL REFERENCES EMPLOYEE ON DELETE CASCADE,
	POSITION_ID INTEGER NOT NULL REFERENCES POSITION ON DELETE RESTRICT, -- needs better check
	SINCE       DATE NOT NULL DEFAULT NOW()
);

-- CLIENT
-- Relation that contains all essential data about client.

CREATE TABLE CLIENT (
	CLIENT_ID                   SERIAL PRIMARY KEY,
	DEFAULT_SHIPMENT_ADDRESS_ID INTEGER NOT NULL,
	DEFAULT_BILLING_ADDRESS_ID  INTEGER NOT NULL
);

-- CLIENT_ADDRESS
-- Relation that contains address data for billing and shipment.

CREATE TABLE CLIENT_ADDRESS (
	CLIENT_ADDRESS_ID SERIAL PRIMARY KEY,
	CLIENT_ID         INTEGER NOT NULL REFERENCES CLIENT ON DELETE CASCADE,
	FIRST_NAME        VARCHAR(128) NOT NULL,
	LAST_NAME         VARCHAR(128) NOT NULL,
	COMPANY           VARCHAR(128),
	ADDRESS           VARCHAR(512) NOT NULL,
	CITY              VARCHAR(64)  NOT NULL,
	EMAIL             VARCHAR(128) NOT NULL UNIQUE,
	PHONE             VARCHAR(32),
	FAX               VARCHAR(32)
);

ALTER TABLE CLIENT ADD FOREIGN KEY(DEFAULT_SHIPMENT_ADDRESS_ID) REFERENCES CLIENT_ADDRESS(CLIENT_ADDRESS_ID);
ALTER TABLE CLIENT ADD FOREIGN KEY(DEFAULT_BILLING_ADDRESS_ID) REFERENCES CLIENT_ADDRESS(CLIENT_ADDRESS_ID);

-- SHIPMENT_TYPE
--

CREATE TABLE SHIPMENT_TYPE(
	SHIPMENT_TYPE_ID SERIAL PRIMARY KEY,
	NAME             VARCHAR(128) NOT NULL,
	MIN_ORDER_VALUE  NUMERIC(6,2) NOT NULL DEFAULT 0,
	MAX_WEIGHT       NUMERIC(6,2),
	COST             NUMERIC(6,2) NOT NULL,
	ACTIVE           BOOLEAN NOT NULL DEFAULT TRUE
);


-- ORDER
-- Relation for storing orders.
-- * Shipment address is NULL if the order was not placed remotely
-- * Billing address is not NULL only if client required an invoice
-- * Client is NULL if it was an anonymous order placed at local store

CREATE TABLE "ORDER" (
	ORDER_ID            SERIAL PRIMARY KEY,
	CLIENT_ID           INTEGER NOT NULL REFERENCES CLIENT(CLIENT_ID),
	SHIPMENT_ADDRESS_ID INTEGER NOT NULL REFERENCES CLIENT_ADDRESS(CLIENT_ADDRESS_ID),
	BILLING_ADDRESS_ID  INTEGER NOT NULL REFERENCES CLIENT_ADDRESS(CLIENT_ADDRESS_ID),
	CREATED_AT          TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
	BRANCH_ID           INTEGER NOT NULL REFERENCES BRANCH(BRANCH_ID),
	SALESMAN_ID         INTEGER NOT NULL REFERENCES EMPLOYEE(EMPLOYEE_ID),
	PAID                BOOLEAN NOT NULL DEFAULT FALSE,
	SHIPPED             BOOLEAN NOT NULL DEFAULT FALSE,
	SHIPMENT_TYPE_ID    INTEGER REFERENCES SHIPMENT_TYPE(SHIPMENT_TYPE_ID)
);

-- CATEGORY
--

CREATE TABLE CATEGORY (
	CATEGORY_ID SERIAL PRIMARY KEY,
	PARENT_ID   INTEGER REFERENCES CATEGORY(CATEGORY_ID),
	NAME        VARCHAR(255)
);

-- PRODUCT
--

CREATE TABLE PRODUCT (
	PRODUCT_ID  SERIAL PRIMARY KEY,
	CATEGORY_ID INTEGER REFERENCES CATEGORY(CATEGORY_ID),
	NAME        VARCHAR(128) NOT NULL,
	WEIGHT      NUMERIC(6,2) NOT NULL
);

-- PRODUCT_PRICE
--

CREATE TABLE PRODUCT_PRICE (
	PRODUCT_ID INTEGER NOT NULL REFERENCES PRODUCT(PRODUCT_ID),
	CREATED_AT TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
	PRICE      NUMERIC(6,2) NOT NULL,
	PRIMARY KEY(PRODUCT_ID, CREATED_AT)
);

-- PRODUCT_STOCK
--

CREATE TABLE PRODUCT_STOCK (
	PRODUCT_ID INTEGER NOT NULL REFERENCES PRODUCT(PRODUCT_ID),
	BRANCH_ID  INTEGER NOT NULL REFERENCES BRANCH(BRANCH_ID),
	QUANTITY   INTEGER NOT NULL,
	PRIMARY KEY (PRODUCT_ID, BRANCH_ID)
);
